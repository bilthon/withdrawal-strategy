{"version":3,"sources":["components/CostChart/CrosshairContent/CrosshairContent.js","components/CostChart/CostChart.js","components/Problem/Problem.js","components/Solution/Solution.js","components/Objection/Objection.js","components/Links/Links.js","utils/Translations.js","pages/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["CrosshairContent","crosshairValues","formatValue","getWithdrawalCost","unit","content","intl","useIntl","_formatValue","value","formatted","toString","toUpperCase","length","y","savings","className","formatMessage","id","defaultMessage","values","amount","x","default","directCost","indirectCost","style","color","fontSize","saving","_getSavings","B","WITHDRAWAL_FEE","verticalStyle","strokeWidth","stroke","fixedCostStyle","variableCostStyle","Units","CostChart","btcPrice","useState","setUnit","setCrosshairValues","chartData","setChartData","fiatChartData","setFiatChartData","satsPerDollar","parseInt","getX","useEffect","xLimit","data","i","push","factor","adjustedData","map","pair","tickFormat","index","scale","tickTotal","formatInt","chartWidth","window","innerWidth","chartHeight","onClick","height","width","onMouseLeave","onNearestX","title","description","tickValues","itemsFormat","dataPoints","dataPoint","Intl","NumberFormat","maximumFractionDigits","format","items","Problem","withdrawalCost","satsAmount","usdAmount","Solution","Objection","generateParagraph","en","Links","href","target","Translations","messages_en","messages_es","messages_pt","Main","setBtcPrice","locale","setLocale","a","exchangeClass","cctx","binance","fetchTickers","tickers","last","fetchPrice","messages","for","onChange","event","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1a2cbbd.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport './CrosshairContent.css';\n\nconst CrosshairContent = ({ crosshairValues, formatValue, getWithdrawalCost, unit}) => {\n\tlet content = null;\n\n\tconst intl = useIntl();\n\n\tconst _formatValue = value => {\n\t\tlet formatted;\n\t\tif (formatValue) formatted = formatValue(value);\n\t\telse formatted = value.toString();\n\t\tif (unit) formatted = `${formatted} ${unit.toUpperCase()}`;\n\t\treturn formatted;\n\t}\n\n\tconst _getTitle = () => intl.formatMessage({\n\t\tid: 'app.costChart.crosshair.title',\n\t\tdefaultMessage: 'Withdrawal'\n\t});\n\n\tconst _getSavings = (savings) => intl.formatMessage({\n\t\tid: 'app.costChart.crosshair.saving',\n\t\tdefaultMessage: `Savings : ${_formatValue(savings)}`,\n\t}, { saving: _formatValue(savings) })\n\n\tif (crosshairValues.length > 0) {\n\t\tconst { y } = crosshairValues[0];\n\t\tconst savings = getWithdrawalCost() - y;\n\t\tcontent = (\n\t\t\t<div className='CrossHair'>\n\t\t\t\t<h4 className='CrossHairTitle'>{_getTitle()}</h4>\n\t\t\t\t<FormattedMessage\n\t\t\t\t\tclassName='CrossHairField'\n\t\t\t\t\tid=\"app.costChart.crosshair.amount\"\n\t\t\t\t\tvalues={{ amount: _formatValue(crosshairValues[0].x) }}\n\t\t\t\t/>\n\t\t\t\t<br/>\n\t\t\t\t<FormattedMessage\n\t\t\t\t\tid=\"app.costChart.crosshair.direct\"\n\t\t\t\t\tdefault={`Direct Cost : ${_formatValue(getWithdrawalCost())}`}\n\t\t\t\t\tvalues={{ directCost: _formatValue(getWithdrawalCost()) }}\n\t\t\t\t/>\n\t\t\t\t<br/>\n\t\t\t\t<FormattedMessage\n\t\t\t\t\tid=\"app.costChart.crosshair.indirect\"\n\t\t\t\t\tdefault={`Indirect Cost : ${_formatValue(crosshairValues[0].y)}`}\n\t\t\t\t\tvalues={{ indirectCost: _formatValue(crosshairValues[0].y) }}\n\t\t\t\t/>\n\t\t\t\t<br/>\n\t\t\t\t<p\n\t\t\t\t\tclassName='CrossHairField'\n\t\t\t\t\tstyle={savings < 0 ? {color: '#FFE7E7', fontSize: 'bold'} : {}}>\n\t\t\t\t\t{ _getSavings(savings) }\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n\treturn content;\n};\n\nexport default CrosshairContent;","import React, { useEffect, useState } from 'react';\nimport { \n\tXYPlot,\n\tLineSeries,\n\tXAxis,\n\tYAxis,\n\tHorizontalGridLines,\n\tVerticalGridLines,\n\tCrosshair,\n  DiscreteColorLegend\n } from 'react-vis';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CrosshairContent from './CrosshairContent/CrosshairContent';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport './CostChart.css';\n\n// Constants of the linear equation y = A + B * x\nconst A = 0;\nconst B = 0.005;\n\n// Withdrawal fees in sats\nconst WITHDRAWAL_FEE = 50e3;\n\n// Interval (in sats) over which to draw different points.\nconst CHART_DATA_STEP = 10e3;\n\n// How much more beyond the 'break even' \n// point to display in the chart\nconst EXTENSION_FACTOR = 1.5;\n\nconst verticalStyle = {\n\tstrokeWidth: 2,\n\tstroke: '#ff0000'\n};\n\nconst fixedCostStyle = {\n\tstrokeWidth: 2,\n\tstroke: '#EEB757'\n};\n\nconst variableCostStyle = {\n\tcolor: '#588E61'\n};\n\nconst Units = {\n\tSATS: 'sats',\n\tUSD: 'usd'\n};\n\nconst CostChart = ({ btcPrice }) => {\n\tconst [unit, setUnit] = useState(Units.SATS);\n\tconst [crosshairValues, setCrosshairValues] = useState([]);\n\n\tconst [chartData, setChartData] = useState([]);\n\tconst [fiatChartData, setFiatChartData] = useState([]);\n\n\tconst intl = useIntl();\n\n\tconst satsPerDollar = () => btcPrice > 0 ? parseInt((1./ btcPrice) * 1e8) : 1;\n\n\tconst getX = (y) => parseInt((y - A) / B);\n\n\tconst getY = (x) => parseInt(A + B * x);\n\n\tuseEffect(() => {\n\t\tconst xBreakEven = getX(WITHDRAWAL_FEE);\n\t\tconst xLimit = xBreakEven * EXTENSION_FACTOR;\n\n\t\tconst data = [];\n\t\tfor (let i = 0; i < xLimit; i = i + CHART_DATA_STEP) {\n\t\t\tdata.push({ x: i, y: getY(i)});\n\t\t}\n\t\tsetChartData(data);\n\t}, [A, B]);\n\n\tuseEffect(() => {\n\t\tif (unit !== Units.SATS && fiatChartData.length === 0) {\n\t\t\tconst factor = satsPerDollar();\n\t\t\tconst adjustedData = chartData.map(pair => {\n\t\t\t\tconst { x, y } = pair;\n\t\t\t\treturn { x: (x / factor), y: (y / factor) };\n\t\t\t});\n\t\t\tsetFiatChartData(adjustedData);\n\t\t}\n\t}, [unit]);\n\n\tconst tickFormat = (value, index, scale, tickTotal) => {\n\t\treturn formatInt(value);\n\t};\n\n\tconst handleUnitToggle = () => {\n\t\tif (unit === Units.SATS)\n\t\t\tsetUnit(Units.USD);\n\t\telse\n\t\t\tsetUnit(Units.SATS);\n\t}\n\n\tconst getWithdrawalCost = () => {\n\t\tif (unit === Units.SATS) return WITHDRAWAL_FEE;\n\t\treturn WITHDRAWAL_FEE / satsPerDollar();\n\t}\n\n\tconst getEquivalencePoint = () => {\n\t\tif (unit === Units.SATS) return getX(WITHDRAWAL_FEE);\n\t\treturn getX(WITHDRAWAL_FEE) / satsPerDollar();\n\t}\n\n\tconst xAxisTitle = () => intl.formatMessage(\n\t\t{\n\t\t\tid: 'app.costChart.xAxis',\n\t\t\tdescription: 'x axis',\n\t\t\tdefaultMessage: `Amount to withdraw (${unit.toUpperCase()})`\n\t\t}, {unit: unit});\n\n\tconst yAxisTitle = () => intl.formatMessage({\n\t\tid: 'app.costChart.yAxis',\n\t\tdescription: 'y axis title',\n\t\tdefaultMessage: `Cost (${unit.toUpperCase()})`\n\t}, {unit: unit});\n\n\tconst onMouseLeave = () => setCrosshairValues([]);\n\n\tconst onNearestX = (value, index) => {\n\t\tsetCrosshairValues([value]);\n\t}\n\n\tconst formatCrosshair = dataPoints => {\n\t\treturn dataPoints.map(dataPoint => {\n\t\t\treturn {\n\t\t\t\ttitle: 'Cost',\n\t\t\t\tvalue: new Intl.NumberFormat('en', {maximumFractionDigits: 2}).format(dataPoint.y)\n\t\t\t}\n\t\t});\n\t}\n\n\tconst formatInt = value => {\n\tif (value < 1e3)\n\t\treturn `${value}`;\n\tif (value < 1000e3)\n\t\treturn `${value / 1e3}K`;\n\telse\n\t\treturn `${value / 1e6}M`;\n\t}\n\n\tconst formatValue = value => {\n\t\tif (unit === Units.SATS) {\n\t\t\treturn formatInt(value);\n\t\t} else {\n\t\t\treturn new Intl.NumberFormat('en', {maximumFractionDigits: 2}).format(value);\n\t\t}\n\t}\n\n\tconst _getChartWidth = () => {\n\t\tif (window.innerWidth > 320)\n\t\t\treturn parseInt(window.innerWidth * 0.7);\n\t\telse\n\t\t\treturn window.innerWidth;\n\t}\n\n\t// Calculating chart width\n\tconst chartWidth = _getChartWidth();\n\tconst chartHeight = parseInt(chartWidth * 0.4);\n\n\treturn (\n\t\t<div className='CostChartRoot'>\n\t\t\t<div className='Unit'>\n\t\t\t\t<label>Unit</label>\n\t\t\t\t<button onClick={handleUnitToggle}>{unit ? unit.toUpperCase() : ''}</button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<FormattedMessage\n\t\t\t\t\tid=\"app.costChart.priceMessage\"\n\t\t\t\t\tdefaultMessage={`Price: ${btcPrice} USD`}\n\t\t\t\t\tvalues={{btcPrice: btcPrice}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<XYPlot\n\t\t\t\tclassName='Plot'\n\t\t\t\theight={chartHeight}\n\t\t\t\twidth={chartWidth}\n\t\t\t\tonMouseLeave={onMouseLeave}>\n\t\t\t\t<LineSeries\n\t\t\t\t\tdata={unit === Units.SATS ? chartData : fiatChartData}\n\t\t\t\t\tonNearestX={onNearestX}\n\t\t\t\t\tcolor={variableCostStyle.color}\n\t\t\t\t/>\n\t\t\t\t<XAxis title={xAxisTitle()} tickFormat={tickFormat}/>\n\t\t\t\t<YAxis title={yAxisTitle()} tickFormat={tickFormat}/>\n\t\t\t\t<HorizontalGridLines tickValues={[getWithdrawalCost()]} style={fixedCostStyle}/>\n\t\t\t\t<VerticalGridLines tickValues={[getEquivalencePoint()]} style={verticalStyle}/>\n\t\t\t\t<Crosshair values={crosshairValues} itemsFormat={formatCrosshair}>\n\t\t\t\t\t<CrosshairContent\n\t\t\t\t\t\tcrosshairValues={crosshairValues}\n\t\t\t\t\t\tformatValue={formatValue}\n\t\t\t\t\t\tgetWithdrawalCost={getWithdrawalCost}\n\t\t\t\t\t\tunit={unit}/>\n\t\t\t\t</Crosshair>\n\t\t\t\t<DiscreteColorLegend items={[\n\t\t\t\t\t<FormattedMessage\n\t\t\t\t\t\tid=\"app.costChart.directWithdrawal\"\n\t\t\t\t\t\tdefaultMessage={'Direct Withdrawal'}\n\t\t\t\t\t/>,\n\t\t\t\t\t<FormattedMessage\n\t\t\t\t\t\tid=\"app.costChart.indirectWithdrawal\"\n\t\t\t\t\t\tdefaultMessage={'Indirect Withdrawal'}\n\t\t\t\t\t/>\n\t\t\t\t]}/>\n\t\t\t</XYPlot>\n\t\t</div>\n\t);\n};\n\n\nexport default CostChart;","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport './Problem.css';\n\nconst Problem = ({ btcPrice, withdrawalCost }) => {\n\tconst intl = useIntl();\n\n\tconst _getTitle = () => intl.formatMessage({\n\t\tid: 'app.problem.title'\n\t});\n\n\tconst _getContent = () => intl.formatMessage({\n\t\tid: 'app.problem.content',\n\t\tdefaultMessage: 'You want to buy a small amount of Bitcoin, but Binance charges you {satsAmount} satoshis per withdraw. That\\'s {usdAmount} USD at current market prices! This forces you to eiter make a large purchase, not buy it, or buy it and just leave it at the exchange.'\n\t}, {\n\t\tsatsAmount: withdrawalCost,\n\t\tusdAmount: (withdrawalCost * 1e-8) * btcPrice\n\t});\n\n\treturn (\n\t\t<div className='ParagraphContainer'>\n\t\t\t<h2>{ _getTitle() }</h2>\n\t\t\t<p>{ _getContent() }</p>\n\t\t</div>\n\t)\n}\n\nexport default Problem;","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport './Solution.css';\n\nconst Solution = () => {\n\n\tconst intl = useIntl();\n\n\tconst _getTitle = () => intl.formatMessage({\n\t\tid: 'app.solution.title'\n\t});\n\n\tconst _getContent = () => intl.formatMessage({\n\t\tid: 'app.solution.content'\n\t});\n\n\treturn (\n\t\t<div className='ParagraphContainer'>\n\t\t\t<h2>{ _getTitle() }</h2>\n\t\t\t<p>{ _getContent() }</p>\n\t\t</div>\n\t)\n}\n\nexport default Solution;","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport en from '../../lang/en.json';\nimport './Objection.css';\n\nconst Objection = () => {\n\n\tconst intl = useIntl();\n\n\tconst _getTitle = () => intl.formatMessage({\n\t\tid: 'app.objection.title',\n\t\tdefaultMessage: en['app.objection.title']\n\t});\n\n\tconst generateParagraph = (id) => intl.formatMessage({\n\t\tid: id,\n\t\tdefaultMessage: en[id]\n\t});\n\n\treturn (\n\t\t<div className='ParagraphContainer'>\n\t\t\t<h2>{_getTitle()}</h2>\n\t\t\t<p>{generateParagraph('app.objection.paragraph1')}</p>\n\t\t\t<p>{generateParagraph('app.objection.paragraph2')}</p>\n\t\t\t<p>{generateParagraph('app.objection.paragraph3')}</p>\n\t\t\t<p>{generateParagraph('app.objection.paragraph4')}</p>\n\t\t</div>\n\t)\n};\n\nexport default Objection;","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport en from '../../lang/en.json';\nimport './Links.css';\n\nconst Links = () => {\n\n\tconst intl = useIntl();\n\n\tconst _getTitle = () => intl.formatMessage({\n\t\tid: 'app.links.title',\n\t\tdefaultMessage: en['app.links.title']\n\t});\n\n\treturn (\n\t\t<div className='ParagraphContainer'>\n\t\t\t<h2>{ _getTitle() }</h2>\n\t\t\t<ul className='Links'>\n\t\t\t\t<li>\n\t\t\t\t\t<a href='https://sideshift.ai/a/8hEdnBJyv' target='_blank'>\n\t\t\t\t\t\tSideShift\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href='https://fixedfloat.com/LTC/BTC?ref=sr3fn9jb' target='_blank'>\n\t\t\t\t\t\tFixedFloat\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default Links;","import messages_en from '../lang/en.json';\nimport messages_es from '../lang/es.json';\nimport messages_pt from '../lang/pt.json';\n\nconst Translations = {\n\t'en': messages_en,\n\t'es': messages_es,\n\t'pt': messages_pt\n};\n\nexport default Translations;","import React, { useState, useEffect } from 'react';\nimport CostChart from '../../components/CostChart/CostChart';\nimport Problem from '../../components/Problem/Problem';\nimport Solution from '../../components/Solution/Solution';\nimport Objection from '../../components/Objection/Objection';\nimport Links from '../../components/Links/Links';\nimport { IntlProvider } from 'react-intl';\nimport Translations from '../../utils/Translations';\nimport cctx from 'ccxt';\nimport './Main.css';\n\nconst WITHDRAWAL_COST = 50e3;\n\nconst Main = () => {\n\tconst [btcPrice, setBtcPrice] = useState(0);\n\tconst [locale, setLocale] = useState('en');\n\n\tuseEffect(() => {\n\t\tconst fetchPrice = async () => {\n\t\t\tconst exchangeClass = cctx['binance'];\n\t\t\tconst binance = new exchangeClass({});\n\t\t\tconst tickers = await binance.fetchTickers();\n\t\t\tconst btcPrice = tickers['BTC/USDT'].last;\n\t\t\tsetBtcPrice(btcPrice);\n\t\t}\n\t\tfetchPrice();\n\t}, []);\n\n\tconst onLanguageSelected = event => {\n\t\tsetLocale(event.target.value);\n\t}\n\n\treturn (\n\t\t<div className='Main'>\n\t\t\t<IntlProvider locale={locale} messages={Translations[locale]}>\n\t\t\t\t<label for=\"locale-select\">Choose a language:</label>\n\t\t\t\t<select onChange={onLanguageSelected} name=\"locales\" id=\"locale-select\">\n\t\t\t\t\t\t<option value=\"en\">English</option>\n\t\t\t\t\t\t<option value=\"es\">Spanish</option>\n\t\t\t\t\t\t<option value=\"pt\">Portuguese</option>\n\t\t\t\t</select>\n\t\t\t\t<Problem btcPrice={btcPrice} withdrawalCost={WITHDRAWAL_COST}/>\n\t\t\t\t<Solution/>\n\t\t\t\t<Objection/>\n\t\t\t\t<CostChart btcPrice={btcPrice}/>\n\t\t\t\t<Links/>\n\t\t\t</IntlProvider>\n\t\t</div>\n\t)\n}\n\nexport default Main;","import './App.css';\nimport Main from './pages/Main/Main';\n\nfunction App() {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}