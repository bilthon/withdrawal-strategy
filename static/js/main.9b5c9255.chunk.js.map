{"version":3,"sources":["logo.svg","components/CostChart/CrosshairContent/CrosshairContent.js","components/CostChart/CostChart.js","pages/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["CrosshairContent","crosshairValues","formatValue","getWithdrawalCost","unit","content","_formatValue","value","formatted","toString","toUpperCase","length","y","x","savings","className","style","color","fontSize","B","WITHDRAWAL_FEE","verticalStyle","strokeWidth","stroke","Units","CostChart","useState","btcPrice","setBtcPrice","setUnit","setCrosshairValues","chartData","setChartData","fiatChartData","setFiatChartData","satsPerDollar","parseInt","getX","useEffect","xLimit","data","i","push","factor","adjustedData","map","pair","a","exchangeClass","cctx","binance","fetchTickers","tickers","last","fetchPrice","tickFormat","index","scale","tickTotal","formatInt","onClick","height","width","onMouseLeave","onNearestX","title","tickValues","values","itemsFormat","dataPoints","dataPoint","Intl","NumberFormat","maximumFractionDigits","format","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6YAAe,I,kFC8BAA,G,OA3BU,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,gBAAiBC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,kBAAmBC,EAAU,EAAVA,KACxEC,EAAU,KAERC,EAAe,SAAAC,GACpB,IAAIC,EAIJ,OAHiBA,EAAbN,EAAyBA,EAAYK,GACxBA,EAAME,WACnBL,IAAMI,EAAS,UAAMA,EAAN,YAAmBJ,EAAKM,gBACpCF,GAGR,GAAIP,EAAgBU,OAAS,EAAG,CAAC,IAAD,EACdV,EAAgB,GAAtBW,GADoB,EACvBC,EADuB,EACpBD,GACLE,EAAUX,IAAsBS,EACtCP,EACC,sBAAKU,UAAU,YAAf,UACC,oBAAIA,UAAU,iBAAd,wBACA,oBAAGA,UAAU,iBAAb,qBAAuCT,EAAaL,EAAgB,GAAGY,GAAvE,OACA,oBAAGE,UAAU,iBAAb,2BAA6CT,EAAaH,KAA1D,OACA,oBAAGY,UAAU,iBAAb,6BAA+CT,EAAaL,EAAgB,GAAGW,GAA/E,OACA,oBAAGG,UAAU,iBAAiBC,MAAOF,EAAU,EAAI,CAACG,MAAO,UAAWC,SAAU,QAAU,GAA1F,uBAAyGZ,EAAaQ,GAAtH,UAIH,OAAOT,ICVFc,G,cAAI,MAGJC,EAAiB,IASjBC,EAAgB,CACrBC,YAAa,EACbC,OAAQ,WAGHC,EACC,OADDA,EAEA,MAuISC,EApIG,WAAO,IAAD,EACSC,mBAAS,GADlB,mBAChBC,EADgB,KACNC,EADM,OAECF,mBAASF,GAFV,mBAEhBpB,EAFgB,KAEVyB,EAFU,OAGuBH,mBAAS,IAHhC,mBAGhBzB,EAHgB,KAGC6B,EAHD,OAKWJ,mBAAS,IALpB,mBAKhBK,EALgB,KAKLC,EALK,OAMmBN,mBAAS,IAN5B,mBAMhBO,EANgB,KAMDC,EANC,KAQjBC,EAAgB,kBAAMR,EAAW,EAAIS,SAAU,EAAIT,EAAY,KAAO,GAEtEU,EAAO,SAACzB,GAAD,OAAOwB,UAAUxB,EAjCrB,GAiC8BO,IAIvCmB,qBAAU,WAKT,IAJA,IAHazB,EAIP0B,EA5BiB,IA2BJF,EAAKjB,GAGlBoB,EAAO,GACJC,EAAI,EAAGA,EAAIF,EAAQE,GAnCN,IAoCrBD,EAAKE,KAAK,CAAE7B,EAAG4B,EAAG7B,GARNC,EAQc4B,EARRL,SAnCX,EAmCwBjB,EAAIN,MAUpCmB,EAAaQ,KACX,CA9CM,EA8CFrB,IAEPmB,qBAAU,WACT,GAAIlC,IAASoB,GAAuC,IAAzBS,EAActB,OAAc,CACtD,IAAMgC,EAASR,IACTS,EAAeb,EAAUc,KAAI,SAAAC,GAAS,IACnCjC,EAASiC,EAATjC,EAAGD,EAAMkC,EAANlC,EACX,MAAO,CAAEC,EAAIA,EAAI8B,EAAS/B,EAAIA,EAAI+B,MAEnCT,EAAiBU,MAEhB,CAACxC,IAEJkC,qBAAU,YACO,uCAAG,kCAAAS,EAAA,6DACZC,EAAgBC,IAAI,QACpBC,EAAU,IAAIF,EAAc,IAFhB,SAGIE,EAAQC,eAHZ,OAGZC,EAHY,OAIZzB,EAAWyB,EAAQ,YAAYC,KACrCzB,EAAYD,GALM,2CAAH,qDAOhB2B,KACE,IAEH,IAAMC,EAAa,SAAChD,EAAOiD,EAAOC,EAAOC,GACxC,OAAOC,EAAUpD,IAUZJ,EAAoB,WACzB,OAAIC,IAASoB,EAAmBJ,EACzBA,EAAiBe,KA2BnBwB,EAAY,SAAApD,GAClB,OAAIA,EAAQ,IACL,GAAN,OAAUA,GACPA,EAAQ,IACL,GAAN,OAAUA,EAAQ,IAAlB,KAEA,UAAUA,EAAQ,IAAlB,MAWD,OACC,sBAAKQ,UAAU,gBAAf,UACC,sBAAKA,UAAU,OAAf,UACC,yCACA,wBAAQ6C,QAzDc,WAEvB/B,EADGzB,IAASoB,EACJA,EAEAA,IAqDP,SAAoCpB,EAAOA,EAAKM,cAAgB,QAEjE,8BACC,wCAAWiB,EAAX,YAED,eAAC,IAAD,CAAQkC,OAAQ,IAAKC,MAAO,IAAKC,aAzCd,kBAAMjC,EAAmB,KAyC5C,UACC,cAAC,IAAD,CAAYU,KAAMpC,IAASoB,EAAaO,EAAYE,EAAe+B,WAxCnD,SAACzD,EAAOiD,GAC1B1B,EAAmB,CAACvB,OAwClB,cAAC,IAAD,CAAO0D,MA/CS,8BAA6B7D,EAAKM,cAAlC,KA+CY6C,WAAYA,IACxC,cAAC,IAAD,CAAOU,MA9CS,gBAAe7D,EAAKM,cAApB,KA8CY6C,WAAYA,IACxC,cAAC,IAAD,CAAqBW,WAAY,CAAC/D,OAClC,cAAC,IAAD,CAAmB+D,WAAY,CAtD7B9D,IAASoB,EAAmBa,EAAKjB,GAC9BiB,EAAKjB,GAAkBe,KAqD4BnB,MAAOK,IAC/D,cAAC,IAAD,CAAW8C,OAAQlE,EAAiBmE,YAzCf,SAAAC,GACvB,OAAOA,EAAWxB,KAAI,SAAAyB,GACrB,MAAO,CACNL,MAAO,OACP1D,MAAO,IAAIgE,KAAKC,aAAa,KAAM,CAACC,sBAAuB,IAAIC,OAAOJ,EAAU1D,QAqChF,SACC,cAAC,EAAD,CACCX,gBAAiBA,EACjBC,YA1Be,SAAAK,GACnB,OAAIH,IAASoB,EACLmC,EAAUpD,GAEV,IAAIgE,KAAKC,aAAa,KAAM,CAACC,sBAAuB,IAAIC,OAAOnE,IAuBnEJ,kBAAmBA,EACnBC,KAAMA,aCtJGuE,G,OARF,WACZ,OACC,qBAAK5D,UAAU,OAAf,SACC,cAAC,EAAD,QCEY6D,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b5c9255.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './CrosshairContent.css';\n\nconst CrosshairContent = ({ crosshairValues, formatValue, getWithdrawalCost, unit}) => {\n\tlet content = null;\n\n\tconst _formatValue = value => {\n\t\tlet formatted;\n\t\tif (formatValue) formatted = formatValue(value);\n\t\telse formatted = value.toString();\n\t\tif (unit) formatted = `${formatted} ${unit.toUpperCase()}`;\n\t\treturn formatted;\n\t}\n\n\tif (crosshairValues.length > 0) {\n\t\tconst { x, y } = crosshairValues[0];\n\t\tconst savings = getWithdrawalCost() - y;\n\t\tcontent = (\n\t\t\t<div className='CrossHair'>\n\t\t\t\t<h4 className='CrossHairTitle'>Withdrawal</h4>\n\t\t\t\t<p className='CrossHairField'>Amount: {_formatValue(crosshairValues[0].x)} </p>\n\t\t\t\t<p className='CrossHairField'>Direct Cost : {_formatValue(getWithdrawalCost())} </p>\n\t\t\t\t<p className='CrossHairField'>Indirect Cost : {_formatValue(crosshairValues[0].y)} </p>\n\t\t\t\t<p className='CrossHairField' style={savings < 0 ? {color: '#FFE7E7', fontSize: 'bold'} : {}}>Savings : {_formatValue(savings)} </p>\n\t\t\t</div>\n\t\t);\n\t}\n\treturn content;\n};\n\nexport default CrosshairContent;","import React, { useEffect, useState } from 'react';\nimport { \n\tXYPlot,\n\tLineSeries,\n\tXAxis,\n\tYAxis,\n\tHorizontalGridLines,\n\tVerticalGridLines,\n\tCrosshair\n } from 'react-vis';\nimport cctx from 'ccxt';\nimport CrosshairContent from './CrosshairContent/CrosshairContent';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport './CostChart.css';\n\n// Constants of the linear equation y = A + B * x\nconst A = 0;\nconst B = 0.005;\n\n// Withdrawal fees in sats\nconst WITHDRAWAL_FEE = 50e3;\n\n// Interval (in sats) over which to draw different points.\nconst CHART_DATA_STEP = 10e3;\n\n// How much more beyond the 'break even' \n// point to display in the chart\nconst EXTENSION_FACTOR = 1.5;\n\nconst verticalStyle = {\n\tstrokeWidth: 2,\n\tstroke: '#ff0000'\n};\n\nconst Units = {\n\tSATS: 'sats',\n\tUSD: 'usd'\n};\n\nconst CostChart = () => {\n\tconst [btcPrice, setBtcPrice] = useState(0);\n\tconst [unit, setUnit] = useState(Units.SATS);\n\tconst [crosshairValues, setCrosshairValues] = useState([]);\n\n\tconst [chartData, setChartData] = useState([]);\n\tconst [fiatChartData, setFiatChartData] = useState([]);\n\n\tconst satsPerDollar = () => btcPrice > 0 ? parseInt((1./ btcPrice) * 1e8) : 1;\n\n\tconst getX = (y) => parseInt((y - A) / B);\n\n\tconst getY = (x) => parseInt(A + B * x);\n\n\tuseEffect(() => {\n\t\tconst xBreakEven = getX(WITHDRAWAL_FEE);\n\t\tconst xLimit = xBreakEven * EXTENSION_FACTOR;\n\n\t\tconst data = [];\n\t\tfor (let i = 0; i < xLimit; i = i + CHART_DATA_STEP) {\n\t\t\tdata.push({ x: i, y: getY(i)});\n\t\t}\n\t\tsetChartData(data);\n\t}, [A, B]);\n\n\tuseEffect(() => {\n\t\tif (unit !== Units.SATS && fiatChartData.length === 0) {\n\t\t\tconst factor = satsPerDollar();\n\t\t\tconst adjustedData = chartData.map(pair => {\n\t\t\t\tconst { x, y } = pair;\n\t\t\t\treturn { x: (x / factor), y: (y / factor) };\n\t\t\t});\n\t\t\tsetFiatChartData(adjustedData);\n\t\t}\n\t}, [unit]);\n\n\tuseEffect(() => {\n\t\tconst fetchPrice = async () => {\n\t\t\tconst exchangeClass = cctx['binance'];\n\t\t\tconst binance = new exchangeClass({});\n\t\t\tconst tickers = await binance.fetchTickers();\n\t\t\tconst btcPrice = tickers['BTC/USDT'].last;\n\t\t\tsetBtcPrice(btcPrice);\n\t\t}\n\t\tfetchPrice();\n\t}, []);\n\n\tconst tickFormat = (value, index, scale, tickTotal) => {\n\t\treturn formatInt(value);\n\t};\n\n\tconst handleUnitToggle = () => {\n\t\tif (unit === Units.SATS)\n\t\t\tsetUnit(Units.USD);\n\t\telse\n\t\t\tsetUnit(Units.SATS);\n\t}\n\n\tconst getWithdrawalCost = () => {\n\t\tif (unit === Units.SATS) return WITHDRAWAL_FEE;\n\t\treturn WITHDRAWAL_FEE / satsPerDollar();\n\t}\n\n\tconst getEquivalencePoint = () => {\n\t\tif (unit === Units.SATS) return getX(WITHDRAWAL_FEE);\n\t\treturn getX(WITHDRAWAL_FEE) / satsPerDollar();\n\t}\n\n\tconst xAxisTitle = () => `Amount to withdraw (${unit.toUpperCase()})`;\n\n\tconst yAxisTitle = () => `Cost (${unit.toUpperCase()})`;\n\n\tconst onMouseLeave = () => setCrosshairValues([]);\n\n\tconst onNearestX = (value, index) => {\n\t\tsetCrosshairValues([value]);\n\t}\n\n\tconst formatCrosshair = dataPoints => {\n\t\treturn dataPoints.map(dataPoint => {\n\t\t\treturn {\n\t\t\t\ttitle: 'Cost',\n\t\t\t\tvalue: new Intl.NumberFormat('en', {maximumFractionDigits: 2}).format(dataPoint.y)\n\t\t\t}\n\t\t});\n\t}\n\n\tconst formatInt = value => {\n\tif (value < 1e3)\n\t\treturn `${value}`;\n\tif (value < 1000e3)\n\t\treturn `${value / 1e3}K`;\n\telse\n\t\treturn `${value / 1e6}M`;\n\t}\n\n\tconst formatValue = value => {\n\t\tif (unit === Units.SATS) {\n\t\t\treturn formatInt(value);\n\t\t} else {\n\t\t\treturn new Intl.NumberFormat('en', {maximumFractionDigits: 2}).format(value);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='CostChartRoot'>\n\t\t\t<div className='Unit'>\n\t\t\t\t<label>Unit</label>\n\t\t\t\t<button onClick={handleUnitToggle}>{unit ? unit.toUpperCase() : ''}</button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>Price: {btcPrice} USD</p>\n\t\t\t</div>\n\t\t\t<XYPlot height={300} width={700} onMouseLeave={onMouseLeave}>\n\t\t\t\t<LineSeries data={unit === Units.SATS ? chartData : fiatChartData} onNearestX={onNearestX}/>\n\t\t\t\t<XAxis title={xAxisTitle()} tickFormat={tickFormat}/>\n\t\t\t\t<YAxis title={yAxisTitle()} tickFormat={tickFormat}/>\n\t\t\t\t<HorizontalGridLines tickValues={[getWithdrawalCost()]}/>\n\t\t\t\t<VerticalGridLines tickValues={[getEquivalencePoint()]} style={verticalStyle}/>\n\t\t\t\t<Crosshair values={crosshairValues} itemsFormat={formatCrosshair}>\n\t\t\t\t\t<CrosshairContent\n\t\t\t\t\t\tcrosshairValues={crosshairValues}\n\t\t\t\t\t\tformatValue={formatValue}\n\t\t\t\t\t\tgetWithdrawalCost={getWithdrawalCost}\n\t\t\t\t\t\tunit={unit}/>\n\t\t\t\t</Crosshair>\n\t\t\t</XYPlot>\n\t\t</div>\n\t);\n};\n\n\nexport default CostChart;","import React from 'react';\nimport Form from '../../components/Form/Form';\nimport CostChart from '../../components/CostChart/CostChart';\nimport './Main.css';\n\nconst Main = () => {\n\treturn (\n\t\t<div className='Main'>\n\t\t\t<CostChart/>\n\t\t</div>\n\t)\n}\n\nexport default Main;","import logo from './logo.svg';\nimport './App.css';\nimport Main from './pages/Main/Main';\n\nfunction App() {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}